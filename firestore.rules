rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helper ------------
    function isAdmin() {
      // Grant if user token carries the custom claim admin=true.
      return request.auth != null &&
             'admin' in request.auth.token &&
             request.auth.token.admin == true;
    }

    // ---------- Global admin/cloud‑function access ------------
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // ---------- /users collection ------------
    //   • No client may read or write.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // ---------- /songs collection ------------
    //   • Client can READ their own songs.
    //   • No client writes allowed.
    match /songs/{songId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false;
    }

    // ---------- /songsPublic collection ------------
    //   • Client can READ their own songs.
    //   • No client writes allowed.
    match /songsPublic/{songId} {
      allow read: if request.auth != null && 
                    (resource == null || 
                    (resource.data != null && request.auth.uid == resource.data.userId));
      allow write: if false;
    }

    // ---------- /taskStatuses collection ------------
    //   • Client can READ their own task statuses.
    //   • No client writes allowed.
    match /taskStatuses/{taskId} {
      allow read: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
      allow write: if false;
    }

    // ---------- /generationRequests collection ------------
    //   • Client can READ their own requests.
    //   • No client writes allowed.
    match /generationRequests/{taskId} {
      allow read: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
      allow write: if false;
    }

    // ---------- /tasks collection ------------
    //   • Completely blocked to clients.
    match /tasks/{taskId} {
      allow read, write: if false;
    }

    // ---------- /usersPublic collection ------------
    //   • Read‑only for everyone (including unauthenticated users).
    match /usersPublic/{publicUserId} {
      allow read: if true;
      allow write: if false;
    }

    // ---------- /stats collection ------------
    match /stats/{path=**} {
      allow read: if true;
      allow write: if false;
    }

    // ---------- Catch‑all (deny) ------------
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
